ADD_DEFINITIONS(-DHAVE_CONFIG_H=1)
INCLUDE_DIRECTORIES(BEFORE
  ${BFD_SOURCE_DIR}
  ${BFD_SOURCE_DIR}/include
  ${BFD_SOURCE_DIR}/../include
  ${CMAKE_CURRENT_BINARY_DIR}
  .
)

SET(LD_SRCS
ldgram.c 
ldlex.c 
lexsup.c
ldlang.c
mri.c
ldctor.c
ldwrite.c
ldexp.c
ldemul.c
ldver.c
ldmisc.c
ldfile.c
ldcref.c
ldmain.c
eelf_x86_64.c
eelf_i386.c
ei386linux.c
eelf32btsmip.c
eelf32btsmipn32.c
eelf32ltsmip.c
eelf32ltsmipn32.c
eelf64btsmip.c
eelf64ltsmip.c )

# Auto generated crap is annoying and they should just do things correctly
# ldemul-list.h
#(echo "/* This file is automatically generated.  DO NOT EDIT! */";\
#	for f in `echo " " eelf_x86_64.o eelf_i386.o ei386linux.o "" \
#	 | sed -e 's/ e/ ld/g' -e 's/ ld/ /g' -e 's/[.]o//g'`; do \
#	    echo "extern ld_emulation_xfer_type ld_${f}_emulation;"; \
#	done;\
#	echo "";\
#	echo "#define EMULATION_LIST \\";\
#	for f in `echo " " eelf_x86_64.o eelf_i386.o ei386linux.o "" \
#	 | sed -e 's/ e/ ld/g' -e 's/ ld/ /g' -e 's/[.]o//g'`; do \
#	    echo "  &ld_${f}_emulation, \\"; \
#	done;\
#	echo "  0") >ldemul-tmp.h
# mv ldemul-tmp.h ldemul-list.h


# ldmain.c is special
#-DDEFAULT_EMULATION='"elf_x86_64"' \
#    -DSCRIPTDIR='"/opt/pathscale/x86_64-unknown-linux-gnu/lib"' -DBINDIR='"/opt/pathscale/bin"' \
#    -DTOOLBINDIR='"/opt/pathscale/x86_64-unknown-linux-gnu/bin"' \
#    -DTARGET='"x86_64-unknown-linux-gnu"' -DTARGET_SYSTEM_ROOT=\"\" \
#    ../../../ipa_link/ld/ldmain.c

# /bin/sh ../src/ipa_link/ld/genscripts.sh "../src/ipa_link/ld" "/opt/pathscale/lib" "/opt/pathscale" "/opt/pathscale" x86_64-unknown-linux-gnu x86_64-unknown-linux-gnu x86_64-unknown-linux-gnu "elf_x86_64 elf_i386" "/usr/local/lib /lib /usr/lib" no elf_x86_64 "x86_64-unknown-linux-gnu" # Makes eelf_x86_64.c
# /bin/sh ../src/ipa_link/ld/genscripts.sh "../src/ipa_link/ld" "/opt/pathscale/lib" "/opt/pathscale" "/opt/pathscale" x86_64-unknown-linux-gnu x86_64-unknown-linux-gnu x86_64-unknown-linux-gnu "elf_x86_64 elf_i386" "/usr/local/lib /lib /usr/lib" no elf_i386 "i386-unknown-linux-gnu" # Makes eelf_i386.c
# /bin/sh ../src/ipa_link/ld/genscripts.sh "../src/ipa_link/ld" "/opt/pathscale/lib" "/opt/pathscale" "/opt/pathscale" x86_64-unknown-linux-gnu x86_64-unknown-linux-gnu x86_64-unknown-linux-gnu "elf_x86_64 elf_i386" "/usr/local/lib /lib /usr/lib" no i386linux "i386-unknown-linux-gnuaout" # Makes ei386linux.c


set_property(SOURCE ldmain.c PROPERTY COMPILE_DEFINITIONS DEFAULT_EMULATION="elf_x86_64";SCRIPTDIR="${INSTALL_DIR}/x86_64-unknown-linux-gnu/lib";BINDIR="${INSTALL_DIR}/bin";TOOLBINDIR="${INSTALL_DIR}/x86_64-unknown-linux-gnu/bin";TARGET="x86_64-unknown-linux-gnu";TARGET_SYSTEM_ROOT="")

# I don't know if this is needed to pull in libiberty
FOREACH(f
    ASPRINTF ATEXIT BASENAME BSEARCH CALLOC CLOCK GETCWD
    GETPAGESIZE INDEX INSQUE MKSTEMPS MEMCHR MEMCMP MEMCPY MEMMOVE MEMPCPY
    MEMSET PUTENV RANDOM RENAME RINDEX SIGSETMASK STRCASECMP SETENV STPCPY
    STPNCPY STRCHR STRDUP STRNCASECMP STRNDUP STRRCHR STRSTR STRTOD STRTOL
    STRTOUL STRVERSCMP TMPNAM VASPRINTF VFPRINTF VPRINTF VSPRINTF STRERROR
    STRSIGNAL FFS SNPRINTF VSNPRINTF
    )
  # Removed from above list:
  #   WAITPID WAIT3 WAIT4 SYSMP __FSETLOCKING GETRUSAGE ON_EXIT TIMES
  #   PSTAT_GETSTATIC PSTAT_GETDYNAMIC GETSYSINFO TABLE PSIGNAL SYSCONF
  #   REALPATH SYSCTL SBRK CANONICALIZE_FILE_NAME GETTIMEOFDAY
  IF(NOT HAVE_${f})
    STRING(TOLOWER "${f}" SRC)
    LIST(APPEND iberty_SRCS ${SRC}.c)
  ENDIF(NOT HAVE_${f})
ENDFOREACH(f)

#ADD_LIBRARY(iberty ${iberty_SRCS})
add_executable(ld ${LD_SRCS})
SET_TARGET_PROPERTIES(ld PROPERTIES OUTPUT_NAME "ipa_link")
IF(NOT "${CMAKE_SYSTEM_NAME}" MATCHES "SunOS")
    # --export-dynamic is by default on osol
    SET_TARGET_PROPERTIES(ld PROPERTIES LINK_FLAGS "-Wl,--export-dynamic")
ENDIF()
target_link_libraries(ld bfd iberty ${libdl})
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)


set(ipa_symlinks_deps)

foreach(arch ${PATH64_ENABLE_ARCHES})
    set(output ${Path64_BINARY_DIR}/lib/${PSC_FULL_VERSION}/${arch}/ipa_link${CMAKE_EXECUTABLE_SUFFIX})
    add_custom_command(
        OUTPUT ${output}
        COMMAND ${CMAKE_COMMAND} -E create_symlink ../../bin/ipa_link ${output}
    )

    list(APPEND ipa_symlinks_deps ${output})
endforeach()

add_custom_target(stageit-ipa_link DEPENDS ${ipa_symlinks_deps})
add_dependencies(stageit-ipa_link ld)
add_dependencies(compiler-stage stageit-ipa_link)

install(TARGETS ld
    RUNTIME DESTINATION ${PATH64_LIB_PATH}/x8664
    LIBRARY DESTINATION ${PATH64_LIB_PATH}/x8664)

